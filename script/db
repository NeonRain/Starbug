#!/usr/bin/php
<?php
/**
 * This file is part of StarbugPHP
 * @file script/db cli script used to query and manipulate data in the db
 * @author Ali Gangji <ali@neonrain.com>
 * @ingroup script
 */
	include(dirname(__FILE__)."/../core/cli.php");
	$script = array_shift($argv);
	$what = array_shift($argv);
	if ("sync" == $what) $schemer->migrate();
	if ("migrate" == $what) {
		$next = array_shift($argv);
		if (false !== strpos($next, ":")) {
			$next = explode(":", $next);
			$from = $next[0];
			$to = $next[1];
			$schemer->migrate($to, $from);
		} else if (!empty($next)) {
			$to = $next;
			$schemer->migrate($to);
		} else {
			$schemer->migrate();
		}
	}
	if ("dump" == $what) {
		$tables = $sb->db->query("SHOW TABLES LIKE '".Etc::PREFIX."%'")->fetchAll(PDO::FETCH_ASSOC);
		if (!file_exists(BASE_DIR."/var/dump")) {
			mkdir(BASE_DIR."/var/dump");
			chmod(BASE_DIR."/var/dump", 0777);
		}
		$search = array(";");
		$replace = array("\;");
		$user = str_replace($search, $replace, Etc::DB_USERNAME);
		$pass = str_replace($search, $replace, Etc::DB_PASSWORD);
		$dbname = str_replace($search, $replace, Etc::DB_NAME);
		$host = str_replace($search, $replace, Etc::DB_HOST);
		foreach($tables as $idx => $t) {
			$table = array_shift($t);
			echo "Dumping Table $table...\n";
			exec("mysqldump -c --host=".$host." -u ".$user." -p".$pass." ".$dbname." ".$table." > ".BASE_DIR."/var/dump/$table.sql");
			chmod(BASE_DIR."/var/dump/$table.sql", 0777);
		}
	}
	if ("load" == $what) {
		$search = array(";");
		$replace = array("\;");
		$user = str_replace($search, $replace, Etc::DB_USERNAME);
		$pass = str_replace($search, $replace, Etc::DB_PASSWORD);
		$dbname = str_replace($search, $replace, Etc::DB_NAME);
		$host = str_replace($search, $replace, Etc::DB_HOST);
		if ($handle = opendir(BASE_DIR."/var/dump")) {
			while (false !== ($file = readdir($handle))) {
				if (false !== strpos($file, ".sql")) exec("mysql -u $user --host=$host --password=$pass --database=$dbname < ".BASE_DIR."/var/dump/$file");
			}
		}
	}
	if ("store" == $what) {
		$name = array_shift($argv);
		$params = join("  ", $argv);
		$params = starr::star($params);
		$errors = $sb->store($name, $params);
		if (empty($errors)) {
			$id = (empty($params['id'])) ? $sb->insert_id : $params['id'];
			$what = "query";
			$argv = array($name, "where:id='$id'");
		} else {
			foreach($errors as $col => $arr) {
				echo $col.":\n";
				foreach($arr as $e => $m) {
					echo "\t".$m."\n";
				}
			}
		}
	}
	if ("remove" == $what) {
		$name = array_shift($argv);
		foreach($argv as $index => $arg) {
			$arg = explode(":", $arg, 2);
			$argv[$index] = $arg[0]."='".$arg[1]."'";
		}
		$params = join(" ", $argv);
		$sb->remove($name, $params);
	}
	if ("query" == $what) {
		$name = array_shift($argv);
		$params = join("  ", $argv);
		$records = $sb->query($name, $params);
		echo "query $name $params\n";
		cli::table($records);
	}
	if (("m" == $what) || ("migrations" == $what)) {
		$next = array_shift($argv);
		if (($next == "list") || ($next == "l")) {
			$i = 0;
			foreach($schemer->migrations as $m) {
				$i++;
				fwrite(STDOUT, $i." -> ".$m."\n");
			}
		} else if (($next == "remove") || ($next == "rm")) {
			$val = array_shift($argv);
			if (is_numeric($val)) {
				array_splice($schemer->migrations, $val-1, 1);
			} else if (!empty($val)) {
				$idx = array_search($val, $schemer->migrations);
				if (false !== $idx) array_splice($schemer->migrations, $idx, 1);
			}
			store("options", "value:".serialize($schemer->migrations), "name:migrations");
		}
	}
?>
